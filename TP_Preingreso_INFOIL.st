Object subclass: #Empresa	instanceVariableNames: 'pozos'	classVariableNames: ''	poolDictionaries: ''	category: 'TP_Preingreso_INFOIL'!!Empresa methodsFor: 'accessing' stamp: 'Anonymous 1/30/2020 18:53'!pozos	^ pozos! !!Empresa methodsFor: 'accessing' stamp: 'Anonymous 1/30/2020 18:53'!pozos: anObject	pozos := anObject! !!Empresa methodsFor: 'as yet unclassified' stamp: 'Anonymous 1/31/2020 04:18'!produccionDeLaEmpresaParaUnaFecha: unaFecha	"mediante este método se obtiene la producción de la empresa para la fecha pasada como parámetro"	| hayMedicionesAnteriores produccionTotalAgua produccionTotalGas produccionTotalPetroleo resultado |		hayMedicionesAnteriores := OrderedCollection new.	self pozos do: [ :elem | hayMedicionesAnteriores add: (elem hayMedicionesAntesDeFecha: unaFecha ) ] .		(hayMedicionesAnteriores includes: true) ifTrue: [  		    produccionTotalAgua := 0.	    produccionTotalGas := 0.	    produccionTotalPetroleo := 0.		    self pozos do: [ :each |  ((each produccionDelPozoParaUnaFecha: unaFecha) = 'No hay mediciones anteriores a la fecha pasada') ifTrue: [ produccionTotalAgua := produccionTotalAgua + 0] ifFalse:[ produccionTotalAgua := produccionTotalAgua + (each produccionDelPozoParaUnaFecha:  unaFecha) produccionAgua  ] ].		    self pozos do: [ :each |  ((each produccionDelPozoParaUnaFecha: unaFecha) = 'No hay mediciones anteriores a la fecha pasada') ifTrue: [ produccionTotalGas := produccionTotalGas + 0] ifFalse:[ produccionTotalGas := produccionTotalGas + (each produccionDelPozoParaUnaFecha:  unaFecha) produccionGas  ] ].		    self pozos do: [ :each |  ((each produccionDelPozoParaUnaFecha: unaFecha) = 'No hay mediciones anteriores a la fecha pasada') ifTrue: [ produccionTotalPetroleo := produccionTotalPetroleo + 0] ifFalse:[ produccionTotalPetroleo := produccionTotalPetroleo + (each produccionDelPozoParaUnaFecha:  unaFecha) produccionPetroleo  ] ].		    resultado := ResultadoProduccionEmpresa new.	    resultado produccionTotalAgua: produccionTotalAgua .	    resultado produccionTotalGas: produccionTotalGas .	    resultado produccionTotalPetroleo: produccionTotalPetroleo .		    ^ resultado .     ]	     ifFalse: [ ^ 'La empresa no contiene pozos con mediciones anteriores a la fecha pasada. ' ].! !!Empresa methodsFor: 'as yet unclassified' stamp: 'Anonymous 1/31/2020 04:15'!removerPozo: unPozo	"elimina un pozo de la coleccion de pozos, si es que está"	   (self pozos includes: unPozo ) ifTrue: [ self pozos remove: unPozo ].! !!Empresa methodsFor: 'as yet unclassified' stamp: 'Anonymous 1/31/2020 04:13'!agregarPozo: unPozo	self pozos add: unPozo .! !!Empresa methodsFor: 'as yet unclassified' stamp: 'Anonymous 1/31/2020 04:12'!cantidadDePozos   ^ self pozos size .! !!Empresa methodsFor: 'as yet unclassified' stamp: 'Anonymous 1/31/2020 04:13'!pozosGenerandoPerdidas	"este método retorna aquellos pozos que están en estado Generando Perdidas"	| pozosConPerdidas |	     pozosConPerdidas := self pozos select: [ :each | each estado generaPerdidas ].     ^ pozosConPerdidas .! !!Empresa methodsFor: 'as yet unclassified' stamp: 'Anonymous 1/31/2020 04:20'!comprarOperacionesDePozo: unPozo aLaEmpresa: unaEmpresa	"lo que realiza este método es la compra de operaciones sobre un pozo de una empresa a otra"	"PRECONDICION: se asume que el pozo se encuentra en la empresa"		unaEmpresa removerPozo: unPozo .	self agregarPozo: unPozo .! !TestCase subclass: #EmpresaTest	instanceVariableNames: 'empresa'	classVariableNames: ''	poolDictionaries: ''	category: 'TP_Preingreso_INFOIL'!!EmpresaTest methodsFor: 'tests' stamp: 'Anonymous 1/31/2020 04:19'!testProduccionDeLaEmpresaParaUnaFecha	"la empresa contiene 2 pozos en su coleccion de pozos"	    | pozo1 pozo2 pozo3 resultadoProduccionEmpresa|      pozo1 := empresa pozos first .      pozo2 := empresa pozos second .      pozo3 := empresa pozos third.      resultadoProduccionEmpresa := ResultadoProduccionEmpresa new.      pozo1 agregarNuevaMedicionConLaFecha: (Date year: 2005 month: 02 day: 20 ).      pozo1 realizarProduccionAgua: 20.      pozo1 realizarProduccionGas:  30.      pozo1 realizarProduccionPetroleo: 40.      pozo1 agregarNuevaMedicionConLaFecha: (Date year: 2005 month: 03 day: 22).      pozo1 realizarProduccionAgua: 30.      pozo1 realizarProduccionGas:  40.      pozo1 realizarProduccionPetroleo: 50.      pozo1 agregarNuevaMedicionConLaFecha: (Date year: 2005 month: 04 day: 24).      pozo2 agregarNuevaMedicionConLaFecha: (Date year: 2006 month: 04 day: 03).      pozo2 realizarProduccionAgua: 10.      pozo2 realizarProduccionGas: 20.      pozo2 realizarProduccionPetroleo: 30.           pozo2 agregarNuevaMedicionConLaFecha: (Date year: 2006 month: 05 day: 12).       pozo2 realizarProduccionAgua: 20.      pozo2 realizarProduccionGas: 30.      pozo2 realizarProduccionPetroleo: 30.      pozo2 agregarNuevaMedicionConLaFecha: (Date year: 2006 month: 06 day: 10).      resultadoProduccionEmpresa := empresa produccionDeLaEmpresaParaUnaFecha: (Date year: 2006 month: 06  day: 02).      self assert: (resultadoProduccionEmpresa produccionTotalAgua = 60).      self assert: (resultadoProduccionEmpresa produccionTotalGas = 90).      self assert: (resultadoProduccionEmpresa produccionTotalPetroleo = 120). ! !!EmpresaTest methodsFor: 'tests' stamp: 'Anonymous 1/31/2020 04:16'!testPozosGenerandoPerdidas 	"comment stating purpose of message"	| pozosQueGeneranPerdidas |		pozosQueGeneranPerdidas  := empresa pozosGenerandoPerdidas .	self assert: (pozosQueGeneranPerdidas size = 1).! !!EmpresaTest methodsFor: 'tests' stamp: 'Anonymous 1/31/2020 04:28'!testEmpresaCompraPozoAOtra"test que verifica la compra de una empresa a las operaciones de un pozo de otra empresa"	    | empresa2 pozoAComprar |      empresa2 := Empresa new.      empresa2 pozos: OrderedCollection new.      pozoAComprar := empresa pozos first .      empresa2 comprarOperacionesDePozo: pozoAComprar aLaEmpresa: empresa .             self assert: (empresa cantidadDePozos = 2).      self assert: (empresa2 cantidadDePozos = 1).            ! !!EmpresaTest methodsFor: 'running' stamp: 'Anonymous 1/31/2020 04:11'!setUp	    | pozo1 pozo2 pozo3 pozosEmpresa |      pozosEmpresa := OrderedCollection new.            pozo1 := Pozo new.      pozo1 estado: Optima new.      pozo1 fechaInicioActividades: (Date year: 2005 month: 02 day: 10 ).      pozo1 mediciones: OrderedCollection new.      pozo1 produccionAgua: 0.      pozo1 produccionPetroleo: 0.      pozo1 produccionGas: 0.      pozo2:= Pozo new.      pozo2 estado: Optima new.      pozo2 fechaInicioActividades: (Date year: 2006 month: 03 day: 02).      pozo2 mediciones: OrderedCollection new.      pozo2 produccionAgua: 0.      pozo2 produccionPetroleo: 0.      pozo2 produccionGas: 0.                  pozo3 := Pozo new.      pozo3 estado: GenerandoPerdidas new.       pozo3 fechaInicioActividades: (Date year: 2007 month: 02 day: 13).      pozo3 mediciones: OrderedCollection new.      pozo3 produccionAgua: 0.      pozo3 produccionPetroleo: 0.      pozo3 produccionGas: 0.           pozosEmpresa add: pozo1 .      pozosEmpresa add: pozo2 .      pozosEmpresa add: pozo3 .       empresa := Empresa new.      empresa pozos: pozosEmpresa .! !Object subclass: #EstadoPozo	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP_Preingreso_INFOIL'!!EstadoPozo methodsFor: 'as yet unclassified' stamp: 'Anonymous 1/31/2020 00:13'!generaPerdidas  "delega en los distintos estados si genera perdidas o no"  ^ self subclassResponsibility .! !EstadoPozo subclass: #GenerandoPerdidas	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP_Preingreso_INFOIL'!!GenerandoPerdidas methodsFor: 'as yet unclassified' stamp: 'Anonymous 1/30/2020 20:11'!agregarNuevaMedicion: unaFecha paraPozo: unPozo	"No se puede medir un pozo en un estado que no sea óptimo".	! !!GenerandoPerdidas methodsFor: 'as yet unclassified' stamp: 'Anonymous 1/31/2020 00:14'!generaPerdidas    ^ true.! !EstadoPozo subclass: #Intermitencias	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP_Preingreso_INFOIL'!!Intermitencias methodsFor: 'as yet unclassified' stamp: 'Anonymous 1/30/2020 20:11'!agregarNuevaMedicion: unaFecha paraPozo: unPozo	"No se puede medir un pozo en un estado que no sea óptimo".! !!Intermitencias methodsFor: 'as yet unclassified' stamp: 'Anonymous 1/31/2020 00:15'!generaPerdidas   ^ false. ! !Object subclass: #Medicion	instanceVariableNames: 'fechaMedicion produccionGas produccionPetroleo produccionAgua'	classVariableNames: ''	poolDictionaries: ''	category: 'TP_Preingreso_INFOIL'!!Medicion methodsFor: 'accessing' stamp: 'Anonymous 1/30/2020 17:12'!fechaMedicion: anObject	fechaMedicion := anObject! !!Medicion methodsFor: 'accessing' stamp: 'Anonymous 1/30/2020 17:12'!produccionGas: anObject	produccionGas := anObject! !!Medicion methodsFor: 'accessing' stamp: 'Anonymous 1/30/2020 17:12'!produccionGas	^ produccionGas! !!Medicion methodsFor: 'accessing' stamp: 'Anonymous 1/30/2020 17:12'!fechaMedicion	^ fechaMedicion! !!Medicion methodsFor: 'accessing' stamp: 'Anonymous 1/30/2020 17:12'!produccionAgua	^ produccionAgua! !!Medicion methodsFor: 'accessing' stamp: 'Anonymous 1/30/2020 17:12'!produccionPetroleo	^ produccionPetroleo! !!Medicion methodsFor: 'accessing' stamp: 'Anonymous 1/30/2020 17:12'!produccionPetroleo: anObject	produccionPetroleo := anObject! !!Medicion methodsFor: 'accessing' stamp: 'Anonymous 1/30/2020 17:12'!produccionAgua: anObject	produccionAgua := anObject! !EstadoPozo subclass: #Optima	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP_Preingreso_INFOIL'!!Optima methodsFor: 'as yet unclassified' stamp: 'Anonymous 1/31/2020 04:10'!agregarNuevaMedicion: unaFecha paraPozo: unPozo		| medicion |     medicion := Medicion new.	  medicion fechaMedicion: unaFecha .	  medicion produccionGas: unPozo produccionGas .	  medicion produccionPetroleo: unPozo produccionPetroleo .	  medicion produccionAgua: unPozo produccionAgua .	  unPozo mediciones add: medicion .	! !!Optima methodsFor: 'as yet unclassified' stamp: 'Anonymous 1/31/2020 00:15'!generaPerdidas  ^ false.! !Object subclass: #Pozo	instanceVariableNames: 'estado fechaInicioActividades mediciones produccionAgua produccionPetroleo produccionGas'	classVariableNames: ''	poolDictionaries: ''	category: 'TP_Preingreso_INFOIL'!!Pozo methodsFor: 'accessing' stamp: 'Anonymous 1/30/2020 16:55'!produccionPetroleo: anObject	produccionPetroleo := anObject! !!Pozo methodsFor: 'accessing' stamp: 'Anonymous 1/30/2020 16:55'!estado: anObject	estado := anObject! !!Pozo methodsFor: 'accessing' stamp: 'Anonymous 1/30/2020 16:55'!fechaInicioActividades	^ fechaInicioActividades! !!Pozo methodsFor: 'accessing' stamp: 'Anonymous 1/30/2020 16:55'!mediciones	^ mediciones! !!Pozo methodsFor: 'accessing' stamp: 'Anonymous 1/30/2020 16:55'!produccionAgua	^ produccionAgua! !!Pozo methodsFor: 'accessing' stamp: 'Anonymous 1/30/2020 16:55'!produccionAgua: anObject	produccionAgua := anObject! !!Pozo methodsFor: 'accessing' stamp: 'Anonymous 1/30/2020 16:55'!fechaInicioActividades: anObject	fechaInicioActividades := anObject! !!Pozo methodsFor: 'accessing' stamp: 'Anonymous 1/30/2020 16:55'!estado	^ estado! !!Pozo methodsFor: 'accessing' stamp: 'Anonymous 1/30/2020 16:55'!mediciones: anObject	mediciones := anObject! !!Pozo methodsFor: 'accessing' stamp: 'Anonymous 1/30/2020 16:55'!produccionPetroleo	^ produccionPetroleo! !!Pozo methodsFor: 'accessing' stamp: 'Anonymous 1/30/2020 16:55'!produccionGas	^ produccionGas! !!Pozo methodsFor: 'accessing' stamp: 'Anonymous 1/30/2020 16:55'!produccionGas: anObject	produccionGas := anObject! !!Pozo methodsFor: 'as yet unclassified' stamp: 'Anonymous 1/31/2020 04:19'!realizarProduccionPetroleo: cantProduccion	"se realiza una produccion de petroleo"	   self produccionPetroleo: self produccionPetroleo + cantProduccion .! !!Pozo methodsFor: 'as yet unclassified' stamp: 'Anonymous 1/31/2020 04:17'!hayMedicionesAntesDeFecha: unaFecha	"verifica si hay mediciones que fueron realizados antes de la fecha pasada como paramatro"	| medicionesAnteriores |	     medicionesAnteriores := self mediciones reject: [ :each | each fechaMedicion isAfter: unaFecha  ].    ^ (medicionesAnteriores isEmpty) not .! !!Pozo methodsFor: 'as yet unclassified' stamp: 'Anonymous 1/30/2020 23:43'!cambiarAEstadoIntermitencias    self estado: Intermitencias new.! !!Pozo methodsFor: 'as yet unclassified' stamp: 'Anonymous 1/30/2020 23:43'!cambiarAEstadoOptimo     self estado: Optima new.! !!Pozo methodsFor: 'as yet unclassified' stamp: 'Anonymous 1/30/2020 20:09'!agregarNuevaMedicionConLaFecha: unaFecha	"Dependiendo del estado del pozo, se agrega una nueva medición o no".	self estado agregarNuevaMedicion: unaFecha paraPozo: self.	! !!Pozo methodsFor: 'as yet unclassified' stamp: 'Anonymous 1/30/2020 23:54'!cambiarAEstadoPerdidas   self estado: GenerandoPerdidas new.! !!Pozo methodsFor: 'as yet unclassified' stamp: 'Anonymous 1/31/2020 04:18'!realizarProduccionAgua: cantProduccion	"se realiza una produccion de agua"	self produccionAgua: self produccionAgua + cantProduccion. ! !!Pozo methodsFor: 'as yet unclassified' stamp: 'Anonymous 1/31/2020 04:19'!realizarProduccionGas: cantProduccion	"se realiza una produccion de gas"	self produccionGas: self produccionGas + cantProduccion .! !!Pozo methodsFor: 'as yet unclassified' stamp: 'Anonymous 1/31/2020 04:18'!produccionAcumuladaDelPozoParaUnaFecha: unaFecha	"este método retorna la produccion acumulada del pozo, desde el inicio de actividades hasta al día pasado como parámetro"   | medicionesIntermedias totalAgua totalGas totalPetroleo resultadoAcumulado |     medicionesIntermedias := self mediciones reject: [ :each | (each fechaMedicion isBefore: self fechaInicioActividades) | (each fechaMedicion isAfter: unaFecha )  ] .    (medicionesIntermedias isEmpty ) ifTrue: [ ^ 'No hay mediciones intermedias entre la fecha de inicio de actividades y la fecha pasada como parámetro' ]      ifFalse: [ 	   	          totalAgua := 0.	          totalGas := 0.	          totalPetroleo := 0.	       	          medicionesIntermedias do: [ :each | totalAgua := totalAgua + each produccionAgua ].	          medicionesIntermedias do: [ :each | totalGas := totalGas + each produccionGas  ].	          medicionesIntermedias do: [ :each | totalPetroleo := totalPetroleo + each produccionPetroleo  ].			          resultadoAcumulado := ResultadoProduccionAcumulada3 new.	          resultadoAcumulado totalAcumuladoAgua: totalAgua .	          resultadoAcumulado totalAcumuladoGas: totalGas .	          resultadoAcumulado totalAcumuladoPetroleo: totalPetroleo .	    	          ^ resultadoAcumulado .            	 ].! !!Pozo methodsFor: 'as yet unclassified' stamp: 'Anonymous 1/31/2020 04:24'!produccionDelPozoParaUnaFecha: unaFecha	"mediante este método se obtiene la producción del pozo para la fecha pasada como parámetro"	   | medicionesAnteriores produccionRes |    medicionesAnteriores := self mediciones reject: [ :each | each fechaMedicion isAfter: unaFecha  ].    (medicionesAnteriores isEmpty) ifTrue: [ ^ 'No hay mediciones anteriores a la fecha pasada' ]    ifFalse: [                produccionRes := medicionesAnteriores first .               medicionesAnteriores do: [ :each | (((unaFecha - each fechaMedicion) days) < ((unaFecha - produccionRes fechaMedicion ) days )) ifTrue: [ produccionRes := each ] ].              ^ produccionRes ].! !!Pozo methodsFor: 'as yet unclassified' stamp: 'Anonymous 1/31/2020 04:25'!cantidadDeMediciones   ^ self mediciones size .! !TestCase subclass: #PozoTest	instanceVariableNames: 'pozo pozoEnEstadoIntermitente'	classVariableNames: ''	poolDictionaries: ''	category: 'TP_Preingreso_INFOIL'!!PozoTest methodsFor: 'running' stamp: 'Anonymous 1/31/2020 04:11'!setUp	   pozo := Pozo new.	pozo estado: Optima new.	pozo fechaInicioActividades: (Date year: 2000 month: 01 day: 10).   pozo mediciones: OrderedCollection new.   pozo produccionAgua: 0.   pozo produccionPetroleo: 0.   pozo produccionGas: 0.    pozoEnEstadoIntermitente := Pozo new.   pozoEnEstadoIntermitente estado: Intermitencias new.   pozoEnEstadoIntermitente fechaInicioActividades: (Date year: 2001 month: 03 day: 06).    pozoEnEstadoIntermitente mediciones: OrderedCollection new.   pozoEnEstadoIntermitente produccionAgua: 0.   pozoEnEstadoIntermitente produccionPetroleo: 0.   pozoEnEstadoIntermitente produccionGas: 0.! !!PozoTest methodsFor: 'tests' stamp: 'Anonymous 1/31/2020 04:26'!testAgregarMedicion	"comment stating purpose of message"	 pozo agregarNuevaMedicionConLaFecha: (Date year: 2000 month: 01 day: 20).	 self assert: (pozo cantidadDeMediciones = 1).	    pozoEnEstadoIntermitente agregarNuevaMedicionConLaFecha: (Date year: 2001 month: 04 day: 06).    self assert: (pozoEnEstadoIntermitente cantidadDeMediciones = 0).    "No se pueden medir pozos que no estén en estado óptimo".! !!PozoTest methodsFor: 'tests' stamp: 'Anonymous 1/31/2020 04:19'!testProduccionAcumuladaDeUnPozoParaUnaFecha	"comment stating purpose of message"	| resultadoProduccionAcumulada |	     resultadoProduccionAcumulada := ResultadoProduccionAcumulada new.           pozo realizarProduccionAgua: 50.     pozo realizarProduccionGas: 20.     pozo realizarProduccionPetroleo: 30.     pozo agregarNuevaMedicionConLaFecha: (Date year: 2000 month: 02 day: 19).     pozo realizarProduccionAgua: 50.     pozo realizarProduccionGas: 40.     pozo realizarProduccionPetroleo: 60.     pozo agregarNuevaMedicionConLaFecha: (Date year: 2000 month: 03 day: 20).     pozo realizarProduccionAgua: 40.     pozo realizarProduccionGas: 60.     pozo realizarProduccionPetroleo: 40.     pozo agregarNuevaMedicionConLaFecha: (Date year: 2000 month: 04 day: 25).     pozo realizarProduccionAgua: 20.     pozo realizarProduccionGas: 40.     pozo realizarProduccionPetroleo: 20.     pozo agregarNuevaMedicionConLaFecha: (Date year: 2000 month: 05 day: 21).     resultadoProduccionAcumulada := pozo produccionAcumuladaDelPozoParaUnaFecha: (Date year: 2000 month: 04 day: 10).       self assert: (resultadoProduccionAcumulada totalAcumuladoAgua = 150).     self assert: (resultadoProduccionAcumulada totalAcumuladoGas = 80).     self assert: (resultadoProduccionAcumulada totalAcumuladoPetroleo = 120).! !!PozoTest methodsFor: 'tests' stamp: 'Anonymous 1/31/2020 04:20'!testProduccionDelPozoParaUnaFecha		| medicion |    pozo agregarNuevaMedicionConLaFecha: (Date year: 2000 month: 02 day: 12).    pozo realizarProduccionAgua: 10.    pozo realizarProduccionGas: 20.    pozo realizarProduccionPetroleo: 30.    pozo agregarNuevaMedicionConLaFecha: (Date year: 2000 month: 03 day: 15).    pozo realizarProduccionAgua: 20.    pozo realizarProduccionGas: 30.    pozo realizarProduccionPetroleo: 40.    pozo agregarNuevaMedicionConLaFecha: (Date year: 2000 month: 04 day: 20).    medicion := pozo produccionDelPozoParaUnaFecha: (Date year: 2000 month: 04 day: 01).    self assert: (medicion produccionAgua = 10).    self assert: (medicion produccionGas = 20).    self assert: (medicion produccionPetroleo = 30).! !!PozoTest methodsFor: 'tests' stamp: 'Anonymous 1/31/2020 04:20'!testRealizarProduccionAguaGasYPetroleo	"comment stating purpose of message"	pozo realizarProduccionAgua: 50.	self assert: (pozo produccionAgua =  50).	   pozo realizarProduccionGas: 70.   self assert: (pozo produccionGas = 70).   pozo realizarProduccionPetroleo: 100.   self assert: (pozo produccionPetroleo = 100).! !Object subclass: #ResultadoProduccionAcumulada	instanceVariableNames: 'totalAcumuladoAgua totalAcumuladoGas totalAcumuladoPetroleo'	classVariableNames: ''	poolDictionaries: ''	category: 'TP_Preingreso_INFOIL'!!ResultadoProduccionAcumulada methodsFor: 'accessing' stamp: 'Anonymous 1/30/2020 18:02'!totalAcumuladoGas: anObject	totalAcumuladoGas := anObject! !!ResultadoProduccionAcumulada methodsFor: 'accessing' stamp: 'Anonymous 1/30/2020 18:02'!totalAcumuladoGas	^ totalAcumuladoGas! !!ResultadoProduccionAcumulada methodsFor: 'accessing' stamp: 'Anonymous 1/30/2020 18:02'!totalAcumuladoAgua	^ totalAcumuladoAgua! !!ResultadoProduccionAcumulada methodsFor: 'accessing' stamp: 'Anonymous 1/30/2020 18:02'!totalAcumuladoAgua: anObject	totalAcumuladoAgua := anObject! !!ResultadoProduccionAcumulada methodsFor: 'accessing' stamp: 'Anonymous 1/30/2020 18:02'!totalAcumuladoPetroleo	^ totalAcumuladoPetroleo! !!ResultadoProduccionAcumulada methodsFor: 'accessing' stamp: 'Anonymous 1/30/2020 18:02'!totalAcumuladoPetroleo: anObject	totalAcumuladoPetroleo := anObject! !Object subclass: #ResultadoProduccionEmpresa	instanceVariableNames: 'produccionTotalAgua produccionTotalGas produccionTotalPetroleo'	classVariableNames: ''	poolDictionaries: ''	category: 'TP_Preingreso_INFOIL'!!ResultadoProduccionEmpresa methodsFor: 'accessing' stamp: 'Anonymous 1/30/2020 18:02'!produccionTotalAgua: anObject	produccionTotalAgua := anObject! !!ResultadoProduccionEmpresa methodsFor: 'accessing' stamp: 'Anonymous 1/30/2020 18:02'!produccionTotalGas	^ produccionTotalGas! !!ResultadoProduccionEmpresa methodsFor: 'accessing' stamp: 'Anonymous 1/30/2020 18:02'!produccionTotalGas: anObject	produccionTotalGas := anObject! !!ResultadoProduccionEmpresa methodsFor: 'accessing' stamp: 'Anonymous 1/30/2020 18:02'!produccionTotalPetroleo: anObject	produccionTotalPetroleo := anObject! !!ResultadoProduccionEmpresa methodsFor: 'accessing' stamp: 'Anonymous 1/30/2020 18:02'!produccionTotalAgua	^ produccionTotalAgua! !!ResultadoProduccionEmpresa methodsFor: 'accessing' stamp: 'Anonymous 1/30/2020 18:02'!produccionTotalPetroleo	^ produccionTotalPetroleo! !